// Generated by gencpp from file py_prepkg_rfb/ClubMsg.msg
// DO NOT EDIT!


#ifndef PY_PREPKG_RFB_MESSAGE_CLUBMSG_H
#define PY_PREPKG_RFB_MESSAGE_CLUBMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace py_prepkg_rfb
{
template <class ContainerAllocator>
struct ClubMsg_
{
  typedef ClubMsg_<ContainerAllocator> Type;

  ClubMsg_()
    : test_custom_msg()
    , counter(0.0)  {
    }
  ClubMsg_(const ContainerAllocator& _alloc)
    : test_custom_msg(_alloc)
    , counter(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _test_custom_msg_type;
  _test_custom_msg_type test_custom_msg;

   typedef float _counter_type;
  _counter_type counter;





  typedef boost::shared_ptr< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ClubMsg_

typedef ::py_prepkg_rfb::ClubMsg_<std::allocator<void> > ClubMsg;

typedef boost::shared_ptr< ::py_prepkg_rfb::ClubMsg > ClubMsgPtr;
typedef boost::shared_ptr< ::py_prepkg_rfb::ClubMsg const> ClubMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::py_prepkg_rfb::ClubMsg_<ContainerAllocator1> & lhs, const ::py_prepkg_rfb::ClubMsg_<ContainerAllocator2> & rhs)
{
  return lhs.test_custom_msg == rhs.test_custom_msg &&
    lhs.counter == rhs.counter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::py_prepkg_rfb::ClubMsg_<ContainerAllocator1> & lhs, const ::py_prepkg_rfb::ClubMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace py_prepkg_rfb

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d22cdb44a7a6df4b6ab1a276e00c9df2";
  }

  static const char* value(const ::py_prepkg_rfb::ClubMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd22cdb44a7a6df4bULL;
  static const uint64_t static_value2 = 0x6ab1a276e00c9df2ULL;
};

template<class ContainerAllocator>
struct DataType< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "py_prepkg_rfb/ClubMsg";
  }

  static const char* value(const ::py_prepkg_rfb::ClubMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string test_custom_msg\n"
"float32 counter\n"
;
  }

  static const char* value(const ::py_prepkg_rfb::ClubMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.test_custom_msg);
      stream.next(m.counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClubMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::py_prepkg_rfb::ClubMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::py_prepkg_rfb::ClubMsg_<ContainerAllocator>& v)
  {
    s << indent << "test_custom_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.test_custom_msg);
    s << indent << "counter: ";
    Printer<float>::stream(s, indent + "  ", v.counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PY_PREPKG_RFB_MESSAGE_CLUBMSG_H
